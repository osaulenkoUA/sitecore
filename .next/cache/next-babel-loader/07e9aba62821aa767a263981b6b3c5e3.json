{"ast":null,"code":"import _defineProperty from \"C:/NEXT/corsair/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\NEXT\\\\corsair\\\\src\\\\pages\\\\[[...path]].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from 'react';\nimport NotFound from 'src/NotFound';\nimport { SitecoreContext, ComponentPropsContext, handleExperienceEditorFastRefresh } from '@sitecore-jss/sitecore-jss-nextjs';\nimport Layout from 'src/Layout';\nimport { componentFactory } from 'temp/componentFactory';\n\nvar SitecorePage = function SitecorePage(_ref) {\n  _s();\n\n  var _layoutData$sitecore, _layoutData$sitecore$;\n\n  var notFound = _ref.notFound,\n      layoutData = _ref.layoutData,\n      componentProps = _ref.componentProps;\n  useEffect(function () {\n    // Since Experience Editor does not support Fast Refresh need to refresh EE chromes after Fast Refresh finished\n    handleExperienceEditorFastRefresh();\n  }, []);\n\n  if (notFound || !(layoutData === null || layoutData === void 0 ? void 0 : (_layoutData$sitecore = layoutData.sitecore) === null || _layoutData$sitecore === void 0 ? void 0 : _layoutData$sitecore.route)) {\n    // Shouldn't hit this (as long as 'notFound' is being returned below), but just to be safe\n    return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var context = _objectSpread({\n    route: layoutData.sitecore.route,\n    itemId: (_layoutData$sitecore$ = layoutData.sitecore.route) === null || _layoutData$sitecore$ === void 0 ? void 0 : _layoutData$sitecore$.itemId\n  }, layoutData.sitecore.context);\n\n  return /*#__PURE__*/_jsxDEV(ComponentPropsContext, {\n    value: componentProps,\n    children: /*#__PURE__*/_jsxDEV(SitecoreContext, {\n      componentFactory: componentFactory,\n      context: context,\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        context: context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n}; // This function gets called at request time on server-side.\n\n\n_s(SitecorePage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = SitecorePage;\nexport var __N_SSP = true;\nexport default SitecorePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SitecorePage\");","map":{"version":3,"sources":["C:/NEXT/corsair/src/pages/[[...path]].tsx"],"names":["useEffect","NotFound","SitecoreContext","ComponentPropsContext","handleExperienceEditorFastRefresh","Layout","componentFactory","SitecorePage","notFound","layoutData","componentProps","sitecore","route","context","itemId"],"mappings":";;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,QAAP,MAAqB,cAArB;AACA,SACEC,eADF,EAEEC,qBAFF,EAGEC,iCAHF,QAIO,mCAJP;AAKA,OAAOC,MAAP,MAAmB,YAAnB;AAGA,SAASC,gBAAT,QAAiC,uBAAjC;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA8E;AAAA;;AAAA;;AAAA,MAA3EC,QAA2E,QAA3EA,QAA2E;AAAA,MAAjEC,UAAiE,QAAjEA,UAAiE;AAAA,MAArDC,cAAqD,QAArDA,cAAqD;AACjGV,EAAAA,SAAS,CAAC,YAAM;AACd;AACAI,IAAAA,iCAAiC;AAClC,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAII,QAAQ,IAAI,EAACC,UAAD,aAACA,UAAD,+CAACA,UAAU,CAAEE,QAAb,yDAAC,qBAAsBC,KAAvB,CAAhB,EAA8C;AAC5C;AACA,wBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,MAAMC,OAAuC;AAC3CD,IAAAA,KAAK,EAAEH,UAAU,CAACE,QAAX,CAAoBC,KADgB;AAE3CE,IAAAA,MAAM,2BAAEL,UAAU,CAACE,QAAX,CAAoBC,KAAtB,0DAAE,sBAA2BE;AAFQ,KAGxCL,UAAU,CAACE,QAAX,CAAoBE,OAHoB,CAA7C;;AAMA,sBACE,QAAC,qBAAD;AAAuB,IAAA,KAAK,EAAEH,cAA9B;AAAA,2BACE,QAAC,eAAD;AACE,MAAA,gBAAgB,EAAEJ,gBADpB;AAEE,MAAA,OAAO,EAAEO,OAFX;AAAA,6BAIE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CA3BD,C,CA6BA;;;GA7BMN,Y;;KAAAA,Y;;AA2CN,eAAeA,YAAf","sourcesContent":["import { useEffect } from 'react';\r\nimport { GetServerSideProps } from 'next';\r\nimport NotFound from 'src/NotFound';\r\nimport {\r\n  SitecoreContext,\r\n  ComponentPropsContext,\r\n  handleExperienceEditorFastRefresh,\r\n} from '@sitecore-jss/sitecore-jss-nextjs';\r\nimport Layout from 'src/Layout';\r\nimport { SitecorePageProps } from 'lib/page-props';\r\nimport { sitecorePagePropsFactory } from 'lib/page-props-factory';\r\nimport { componentFactory } from 'temp/componentFactory';\r\nimport { StyleguideSitecoreContextValue } from 'lib/component-props';\r\n\r\nconst SitecorePage = ({ notFound, layoutData, componentProps }: SitecorePageProps): JSX.Element => {\r\n  useEffect(() => {\r\n    // Since Experience Editor does not support Fast Refresh need to refresh EE chromes after Fast Refresh finished\r\n    handleExperienceEditorFastRefresh();\r\n  }, []);\r\n\r\n  if (notFound || !layoutData?.sitecore?.route) {\r\n    // Shouldn't hit this (as long as 'notFound' is being returned below), but just to be safe\r\n    return <NotFound />;\r\n  }\r\n\r\n  const context: StyleguideSitecoreContextValue = {\r\n    route: layoutData.sitecore.route,\r\n    itemId: layoutData.sitecore.route?.itemId,\r\n    ...layoutData.sitecore.context,\r\n  };\r\n\r\n  return (\r\n    <ComponentPropsContext value={componentProps}>\r\n      <SitecoreContext<StyleguideSitecoreContextValue>\r\n        componentFactory={componentFactory}\r\n        context={context}\r\n      >\r\n        <Layout context={context} />\r\n      </SitecoreContext>\r\n    </ComponentPropsContext>\r\n  );\r\n};\r\n\r\n// This function gets called at request time on server-side.\r\nexport const getServerSideProps: GetServerSideProps = async (context) => {\r\n  const props = await sitecorePagePropsFactory.create(context);\r\n\r\n  // Returns custom 404 page with a status code of 404 when notFound: true\r\n  // Note we can't simply return props.notFound due to an issue in Next.js (https://github.com/vercel/next.js/issues/22472)\r\n  const notFound = props.notFound ? { notFound: true } : {};\r\n\r\n  return {\r\n    props,\r\n    ...notFound,\r\n  };\r\n};\r\n\r\nexport default SitecorePage;\r\n"]},"metadata":{},"sourceType":"module"}
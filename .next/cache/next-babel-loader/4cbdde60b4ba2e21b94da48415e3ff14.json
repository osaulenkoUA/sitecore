{"ast":null,"code":"// import { DictionaryService, RestDictionaryService } from '@sitecore-jss/sitecore-jss-nextjs';\n// import config from 'temp/config';\n//\n// export class DictionaryServiceFactory {\n//   create(): DictionaryService {\n//     return new RestDictionaryService({\n//       apiHost: config.sitecoreApiHost,\n//       apiKey: config.sitecoreApiKey,\n//       siteName: config.jssAppName,\n//     });\n//   }\n// }\n//\n// export const dictionaryServiceFactory = new DictionaryServiceFactory();\n//GRAPH QL\nimport { GraphQLDictionaryService } from '@sitecore-jss/sitecore-jss-nextjs';\nimport config from 'temp/config';\nexport class DictionaryServiceFactory {\n  create() {\n    // Switch to REST endpoint if we are in disconnected mode\n    if (process.env.JSS_MODE === JSS_MODE_DISCONNECTED) {\n      return new RestDictionaryService({\n        apiHost: `http://localhost:${process.env.PROXY_PORT || 3042}`,\n        apiKey: config.sitecoreApiKey,\n        siteName: config.jssAppName\n      });\n    }\n\n    return new GraphQLDictionaryService({\n      endpoint: config.graphQLEndpoint,\n      apiKey: config.sitecoreApiKey,\n      siteName: config.jssAppName\n      /*\r\n      The Dictionary Service needs a root item ID in order to fetch dictionary phrases for the current\r\n      app. If your Sitecore instance only has 1 JSS App, you can specify the root item ID here;\r\n      otherwise, the service will attempt to figure out the root item for the current JSS App using GraphQL and app name.\r\n      rootItemId: '{GUID}'\r\n      */\n\n    });\n  }\n\n}\nexport const dictionaryServiceFactory = new DictionaryServiceFactory();","map":{"version":3,"sources":["C:/NEXT/corsair/src/lib/dictionary-service-factory.ts"],"names":["GraphQLDictionaryService","config","DictionaryServiceFactory","create","process","env","JSS_MODE","JSS_MODE_DISCONNECTED","RestDictionaryService","apiHost","PROXY_PORT","apiKey","sitecoreApiKey","siteName","jssAppName","endpoint","graphQLEndpoint","dictionaryServiceFactory"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAA4BA,wBAA5B,QAA4D,mCAA5D;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,MAAMC,wBAAN,CAA+B;AACpCC,EAAAA,MAAM,GAAsB;AAG1B;AACA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyBC,qBAA7B,EAAoD;AAClD,aAAO,IAAIC,qBAAJ,CAA0B;AAC/BC,QAAAA,OAAO,EAAG,oBAAmBL,OAAO,CAACC,GAAR,CAAYK,UAAZ,IAA0B,IAAK,EAD7B;AAE/BC,QAAAA,MAAM,EAAEV,MAAM,CAACW,cAFgB;AAG/BC,QAAAA,QAAQ,EAAEZ,MAAM,CAACa;AAHc,OAA1B,CAAP;AAKD;;AAID,WAAO,IAAId,wBAAJ,CAA6B;AAClCe,MAAAA,QAAQ,EAAEd,MAAM,CAACe,eADiB;AAElCL,MAAAA,MAAM,EAAEV,MAAM,CAACW,cAFmB;AAGlCC,MAAAA,QAAQ,EAAEZ,MAAM,CAACa;AACjB;AACN;AACA;AACA;AACA;AACA;;AATwC,KAA7B,CAAP;AAWD;;AA1BmC;AA6BtC,OAAO,MAAMG,wBAAwB,GAAG,IAAIf,wBAAJ,EAAjC","sourcesContent":["// import { DictionaryService, RestDictionaryService } from '@sitecore-jss/sitecore-jss-nextjs';\r\n// import config from 'temp/config';\r\n//\r\n// export class DictionaryServiceFactory {\r\n//   create(): DictionaryService {\r\n//     return new RestDictionaryService({\r\n//       apiHost: config.sitecoreApiHost,\r\n//       apiKey: config.sitecoreApiKey,\r\n//       siteName: config.jssAppName,\r\n//     });\r\n//   }\r\n// }\r\n//\r\n// export const dictionaryServiceFactory = new DictionaryServiceFactory();\r\n//GRAPH QL\r\nimport { DictionaryService, GraphQLDictionaryService } from '@sitecore-jss/sitecore-jss-nextjs';\r\nimport config from 'temp/config';\r\n\r\nexport class DictionaryServiceFactory {\r\n  create(): DictionaryService {\r\n\r\n\r\n    // Switch to REST endpoint if we are in disconnected mode\r\n    if (process.env.JSS_MODE === JSS_MODE_DISCONNECTED) {\r\n      return new RestDictionaryService({\r\n        apiHost: `http://localhost:${process.env.PROXY_PORT || 3042}`,\r\n        apiKey: config.sitecoreApiKey,\r\n        siteName: config.jssAppName,\r\n      });\r\n    }\r\n\r\n\r\n\r\n    return new GraphQLDictionaryService({\r\n      endpoint: config.graphQLEndpoint,\r\n      apiKey: config.sitecoreApiKey,\r\n      siteName: config.jssAppName,\r\n      /*\r\n      The Dictionary Service needs a root item ID in order to fetch dictionary phrases for the current\r\n      app. If your Sitecore instance only has 1 JSS App, you can specify the root item ID here;\r\n      otherwise, the service will attempt to figure out the root item for the current JSS App using GraphQL and app name.\r\n      rootItemId: '{GUID}'\r\n      */\r\n    });\r\n  }\r\n}\r\n\r\nexport const dictionaryServiceFactory = new DictionaryServiceFactory();\r\n"]},"metadata":{},"sourceType":"module"}